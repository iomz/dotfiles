#!/usr/bin/env zsh

skip_global_compinit=1

# uncomment to analyze init time
ENABLE_ZPROFTIME=true

ZDOTDIR=${XDG_CONFIG_HOME:=~/.config}/zsh

# extended globbing
setopt EXTENDED_GLOB
# don't source /etc/z*
setopt NO_GLOBAL_RCS

(( ${+TERM} )) || export TERM="xterm-256color"; COLORTERM="truecolor"
(( ${+USER} )) || export USER="${USERNAME}"
(( ${+XDG_CACHE_HOME} )) || export XDG_CACHE_HOME="${HOME}/.cache"
(( ${+XDG_CONFIG_HOME} )) || export XDG_CONFIG_HOME="${HOME}/.config"
(( ${+XDG_DATA_HOME} )) || export XDG_DATA_HOME="${HOME}/.local/share"

# Program options
export \
    ANSIBLE_SCP_IF_SSH=y \
    COMPOSE_DOCKER_CLI_BUILD=1 \
    CORRECT_IGNORE="*zinit[-]*" \
    DISABLE_MAGIC_FUNCTIONS=1 \
    DOCKER_BUILDKIT=1 \
    GTAGSLABEL=pygments \
    HOMEBREW_NO_{ENV_HINTS,INSTALL_CLEANUP}=1 \
    OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES \
    RIPGREP_CONFIG_PATH=${XDG_CONFIG_HOME}/ripgrep/rc \
    SHELL_SESSIONS_DISABLE=1

# $PATH and $path (and also $FPATH and $fpath, etc.) are "tied" to each other.
# Modifying one will also modify the other.
# Note that each value in an array is expanded separately. Thus, we can use ~
# for $HOME in each $path entry.
typeset -gU FPATH PATH fpath path
fpath=( $HOME/.config/zsh/(func|comple)tions(N) $fpath )
autoload -Uz ~/.config/zsh/functions/**/*

path=(
    /usr/local/bin(N-/)
    /usr/bin(N-/)
    /bin(N-/)
    /usr/local/sbin(N-/)
    /usr/sbin(N-/)
    /sbin(N-/)
    /usr/X11/bin(N-/)
)
fpath=(
    ~/.zsh/completions(N-/)
    $fpath
)

# Brew
#if [[ "$OSTYPE" == "linux"* ]] && [[ "$(uname -m)" != "aarch64" ]]; then
if [[ -e /etc/rpi-issue ]]; then
    # do nothing for raspberry pi
else
    if [[ -x /opt/homebrew/bin/brew ]]; then
        BREW_LOCATION="/opt/homebrew/bin/brew"
    elif [[ -x /usr/local/bin/brew ]]; then
        BREW_LOCATION="/usr/local/bin/brew"
    elif [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
        BREW_LOCATION="/home/linuxbrew/.linuxbrew/bin/brew"
    elif [[ -x "$HOME/.linuxbrew/bin/brew" ]]; then
        BREW_LOCATION="$HOME/.linuxbrew/bin/brew"
    fi
    if [[ -n "${BREW_LOCATION}" ]]; then
        eval "$("$BREW_LOCATION" shellenv)"
        unset BREW_LOCATION
        path=( ${HOMEBREW_PREFIX}/(s|)bin $path )
        fpath=( $HOMEBREW_PREFIX/share/zsh/site-functions(/N) $fpath )
        # brew curl
        if [[ -x /opt/homebrew/opt/curl/bin/curl ]]; then
            path=( /opt/homebrew/opt/curl/bin $path )
        fi
        # brew gnu awk
        if [[ -x /opt/homebrew/opt/gawk/libexec/gnubin/awk ]]; then
            path=( /opt/homebrew/opt/gawk/libexec/gnubin $path )
        fi
    fi
fi

# Deno (not managed by asdf)
export DENO_INSTALL=$HOME/.deno
path=(${DENO_INSTALL}/bin(N-/) $path)
if ! whence deno > /dev/null; then
    echo "Install Deno to ${DENO_INSTALL}"
    curl -fsSL https://deno.land/install.sh | sh
fi

# LLVM
path=(/usr/local/opt/llvm/bin(N-/) $path)

# Rust (not managed by asdf)
if command -v ~/.cargo/bin/cargo 1> /dev/null 2>&1; then
    path=($HOME/.cargo/bin(N-/) $path)
    source $HOME/.cargo/env
fi

# Snap
if [[ -d /snap/bin ]]; then
    path=(/snap/bin(N-/) $path)
fi

# $HOME/.local/bin and $HOME/bin
path=($HOME/.local/bin(N-/) $HOME/bin(N-/) $path)
