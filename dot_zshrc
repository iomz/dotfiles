# Attach tmux on login
#if [ ! -z `which tmux` ]; then
#  if [ $SHLVL = 1 ]; then
#    if [ $(( `ps aux | grep tmux | grep $USER | grep -v grep | wc -l` )) != 0 ]; then
#      echo -n 'Attach tmux session? [Y/n]'
#      read YN
#      [[ $YN = '' ]] && YN=y
#      [[ $YN = y ]] && tmux attach
#    #else
#    #  tmux
#    fi
#  fi
#fi

### Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
### Initialization code that may require console input (password prompts, [y/n]
### confirmations, etc.) must go above this block; everything else may go below.
##if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
##  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
##fi

#------------------
# start zprof
#zmodload zsh/zprof
#------------------

export DOTFILES="$HOME/dotfiles"

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"

# Original Prompt
#colored_time=%{$fg[cyan]%}%T
#colored_user=$colors[$((`echo "$USER" | sum | cut -f1 -d' '`%${#colors}))+1]$USER
#colored_at=%{$fg[white]%}@
#host_name=`hostname | cut -d. -f1`
##colored_host=$colors[$((`echo "$host_name" | sum | cut -f1 -d' '`%${#colors}))+1]$host_name
#colored_host=%{$fg[blue]%}$host_name
#colored_colon=%{$reset_color%}:
#colored_path=%{$fg[magenta]%}%~
#colored_prompt=%{$reset_color%}%#
#PROMPT="${colored_time} ${colored_user}${colored_at}${colored_host}${colored_colon}${colored_path} $colored_prompt "

# Editor
export EDITOR=nvim

# Locale
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8

# disable r
disable r

# avoid duplicates in PATHs
typeset -U path cdpath fpath manpath

# command halfway
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

# OS specific zshrc
case ${OSTYPE} in
    darwin*)
        alias cat='ccat'
        alias diff='colordiff'
        alias ghqgs='ghq get --shallow'
        alias gohome='cd ~/go/src/github.com/iomz'
        alias less='less -R'
        alias ls='exa'
        #alias ls='ls -CFG'
        alias p8='ping 8.8.8.8'
        ;;
    linux*)
        alias ls='ls --color=always'
        ;;
esac

## Ignore too many list
LISTMAX=100
# History handling
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
HISTTIMEFORMAT="[%Y/%M/%D %H:%M:%S] "

# Display process taken longer than 3 seconds
REPORTTIME=3

# <C-q> and <C-s> in Vim with iTerm2
stty start undef
stty stop undef

# setopts.zsh
setopt append_history
setopt auto_cd
setopt auto_list
setopt auto_menu
setopt auto_name_dirs
unsetopt auto_remove_slash
setopt auto_pushd
setopt brace_ccl
setopt complete_aliases
setopt complete_in_word
setopt correct
setopt glob_dots
setopt hist_expire_dups_first
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_verify
setopt inc_append_history
setopt list_packed
setopt list_types
setopt noautoremoveslash
setopt no_beep
setopt no_list_beep
setopt no_promptcr
setopt no_tify
setopt numeric_glob_sort
setopt print_eight_bit
setopt share_history

# fzf
if [ -f "$HOME/.fzf.zsh" ] ; then
source $HOME/.fzf.zsh
else
git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf
$HOME/.fzf/install --key-bindings --completion --no-update-rc
source $HOME/.fzf.zsh
fi

# zinit
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"
#zinit ice depth=1; zinit light romkatv/powerlevel10k
#zinit load b4b4r07/easy-oneliner
#zinit load zdharma-continuum/history-search-multi-word
zinit light chriskempson/base16-shell
zinit light iomz/emoji-cli
zinit light zdharma-continuum/fast-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit light agkozak/zsh-z

#
# Custom function
it2prof() { echo -e "\033]50;SetProfile=$1\a" }


# Completion
autoload -U compinit && compinit
zmodload zsh/complist
zmodload zsh/computil
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors 'di=36' 'ln=35'
zstyle ':completion:*' list-separator '-->'
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' '+m:{A-Z}={a-z}'
zstyle ':completion:*' verbose yes
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT
zstyle ':completion:*:descriptions' format '%F{yellow}Completing %B%d%b%f'$DEFAULT
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin
zstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT
zstyle ':completion::complete:*' use-cache true

# Key bindings
bindkey -e
# View matchings by groups
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end
# open nvim with fzf
bindkey -s '^o' 'nvim $(fzf)^M'
# zsh-z
#bindkey "^e" "$(z)^M"

# Ansible
export ANSIBLE_SCP_IF_SSH=y

# Editor
export EDITOR=vim

# XDG_CONFIG_HOME
export XDG_CONFIG_HOME=$HOME/.config

# Fork safety
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# $HOME/bin
export PATH=$HOME/bin:$PATH

# sbin
export PATH=/sbin:/usr/sbin:$PATH

# OS specific
case ${OSTYPE} in
    darwin*)
        # local bin
        export PATH=/usr/local/bin:/usr/local/sbin:$PATH
        # HomeBrew
        export PATH=/opt/homebrew/bin:$PATH
        # Neovim
        export PATH=$HOME/bin/nvim-macos/bin:$PATH
        if command -v nvim 1>/dev/null 2>&1; then
            alias vim=nvim
        fi
        # Go
        export GOPATH=$HOME/go
        export PATH=/usr/local/go/bin:$GOPATH/bin:$PATH
        # Rust
        if command -v ~/.cargo/bin/cargo 1>/dev/null 2>&1; then
            export PATH=$HOME/.cargo/bin:$PATH
            source $HOME/.cargo/env
        fi
        # Python
        if [ -s "$HOME/.pyenv/bin/pyenv" ] ; then
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            source $PYENV_ROOT/completions/pyenv.zsh
            eval "$(pyenv init --path)"
            eval "$(pyenv virtualenv-init -)"
        fi
        # Node Version Manager: node, npm, and yarn
        # nvm init option 0: -------------------------
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
        # nvm init option 1: -------------------------
        #export NVM_DIR=$HOME/.config/nvm
        #[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
        #[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
        # nvm init option 2: -------------------------
        #if [ -s "$HOME/.config/nvm/nvm.sh" ]; then
        #    export NVM_DIR="$HOME/.config/nvm"
        #    nvm_cmds=(nvm node npm yarn)
        #    for cmd in $nvm_cmds ; do
        #        alias $cmd="unalias $nvm_cmds && unset nvm_cmds && . $NVM_DIR/nvm.sh && $cmd"
        #    done
        #    [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
        #fi
        # nvm init option 3: -------------------------
        #declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
        #function __init_nvm() {
        #  for i in "${__node_commands[@]}"; do unalias $i; done
        #  . "$NVM_DIR"/nvm.sh
        #  unset __node_commands
        #  unset -f __init_nvm
        #}
        #for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
        # nvm init option 4: -------------------------
        #export NVM_DIR=$HOME/.config/nvm
        #NODEPATH="$(find $NVM_DIR/ -type d -regex ".*/v[0-9.]*/bin")"
        #export PATH=$NODEPATH:$PATH
        # --------------------------------------------
        # Ruby
        eval "$(rbenv init - zsh)"
        ;;
    linux*)
        # Neovim
        if command -v nvim.appimage 1>/dev/null 2>&1; then
            alias vim=nvim.appimage
        fi
        # Go
        export GOPATH=$HOME/go
        export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin:$PATH
        # Rust
        export PATH=$HOME/.cargo/bin:$PATH
        # Python
        if [ -s "$HOME/.pyenv/bin/pyenv" ] ; then
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
        fi
        ;;
esac

# ---------
# end zprof
#zprof
#----------

# source .profile and .login
[[ -s ~/.profile ]] && source "$HOME/.profile"
[[ -s ~/.login ]] && source "$HOME/.login"

# starship
command -v starship &> /dev/null && eval "$(starship init zsh)"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
