#!/usr/bin/env zsh

#------------------------------------
# start zprof
[[ -z "$ZPROF" ]] || zmodload zsh/zprof
#------------------------------------
# zproftime
## diagnose afterward: `zproftime-sort /tmp/zproftime.* | head`
if [[ -n "${ENABLE_ZPROFTIME}" ]]; then
    zmodload zsh/datetime
    setopt PROMPT_SUBST
    PS4='+$EPOCHREALTIME %N:%i> '
    logfile=$(mktemp /tmp/zproftime.XXXX)
    exec 3>&2 2>$logfile
    setopt XTRACE
fi
#------------------------------------

# do stuff for rpi
if [[ -e /etc/rpi-issue ]]; then
    # nvim {{{
    #sudo apt install -y snapd
    #sudo snap install --beta nvim --classic
    # }}}
    # vim {{{
    if [[ ! -d ${XDG_DATA_HOME}/vim/bundle ]]; then
        mkdir -p ${XDG_DATA_HOME}/vim/backup
        mkdir -p ${XDG_DATA_HOME}/vim/bundle
        git clone https://github.com/Shougo/neobundle.vim.git ${XDG_DATA_HOME}/vim/bundle/neobundle.vim
    fi
    # }}}
fi

# rc.d
local ZDOTDIR=${XDG_CONFIG_HOME}/zsh
for f in ${ZDOTDIR}/rc.d/<->-*zsh(N); do
    #print -- "$f"
    source "$f"
done

# Editor
if whence nvim > /dev/null; then
    export EDITOR=nvim
    export VISUAL=nvim
elif whence vim > /dev/null; then
    export EDITOR=vim
    export VISUAL=vim
fi

# Pager
export PAGER=less
#export PAGER=most

#------------------------------------
# zproftime end
if [[ -n "${ENABLE_ZPROFTIME}" ]]; then
    unsetopt XTRACE
    exec 2>&3 3>&-
fi
#------------------------------------
# end zprof
[[ -z "$ZPROF" ]] || zprof | $PAGER
#------------------------------------

############### -------------

# source local
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
[[ -s ~/.profile ]] && source ~/.profile
[[ -s ~/.login ]] && source ~/.login

case ${OSTYPE} in
    darwin*)
        # starship
        command -v starship &> /dev/null && eval "$(starship init zsh)"
        ;;
    linux*)
        colored_time=%{$fg[cyan]%}%t
        colored_user=$colors[$((`echo "$USER" | sum | cut -f1 -d' '`%${#colors}))+1]$USER
        colored_at=%{$fg[white]%}@
        host_name=`hostname | cut -d. -f1`
        colored_host=$colors[$((`echo "$host_name" | sum | cut -f1 -d' '`%${#colors}))+1]$host_name
        #colored_host=%{$fg[blue]%}$host_name
        colored_colon=%{$reset_color%}:
        colored_path=%{$fg[magenta]%}%~
        #colored_prompt=%{$reset_color%}%#
        newline=$'\n'
        PROMPT="${colored_time} ${colored_user}${colored_at}${colored_host}${colored_colon}${PROMPT/ /"$newline"}"
        ;;
esac

# Attach tmux on login
#if [ ! -z `which tmux` ]; then
#  if [ $SHLVL = 1 ]; then
#    if [ $(( `ps aux | grep tmux | grep $USER | grep -v grep | wc -l` )) != 0 ]; then
#      echo -n 'Attach tmux session? [Y/n]'
#      read YN
#      [[ $YN = '' ]] && YN=y
#      [[ $YN = y ]] && tmux attach
#    #else
#    #  tmux
#    fi
#  fi
#fi
